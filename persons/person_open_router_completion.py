"""
This file contains a Person implementation which utilises the OpenRouter API with OpenAI models.
"""

from __future__ import annotations
import os
from openai import OpenAI
from typing import List, Literal, cast
from openai.types.chat import (
    ChatCompletionMessageParam,
    ChatCompletionSystemMessageParam,
)
from persons.person import Person
from session_rooms.ChatEntry import ChatEntry
from session_rooms.session_room import System


class PersonOpenRouterCompletion(Person):
    PERSON_TYPE = "person_open_router_completion"
    MODEL_NAME = "openai/gpt-4o-mini"
    MODEL_NAME = "openai/gpt-4.1-mini"
    # MODEL_NAME = "openai/gpt-4.1"
    # MODEL_NAME = "google/gemini-2.5-flash-preview"
    # MODEL_NAME = "google/gemini-2.0-flash-001"
    # MODEL_NAME = "deepseek/deepseek-chat-v3-0324"
    # MODEL_NAME = "qwen/qwq-32b"
    # MODEL_NAME = "deepseek/deepseek-r1-distill-llama-70b"

    # MODEL_NAME = "mistralai/mixtral-8x7b-instruct"

    def __init__(
        self,
        background_story: str,
        name: str,
        prompt_version: str = "v0",
        *args,
        **kwargs,
    ):
        super().__init__(background_story, name)
        # Set up OpenAI client for OpenRouter with v0.27.7 structure
        self.model_name = PersonOpenRouterCompletion.MODEL_NAME
        self.client = OpenAI(
            api_key=os.getenv("OPENROUTER_API_KEY"),
            base_url="https://openrouter.ai/api/v1",
        )

    def generate_answer(
        self, experiment_scenario: str, chat_list: List[ChatEntry], prompt_version: str
    ):
        generated_prompt: List[ChatCompletionMessageParam] = self.create_prompt(
            experiment_scenario, chat_list, prompt_version
        )

        full_response = self.client.chat.completions.create(
            model=self.model_name,
            messages=generated_prompt,
            max_tokens=100,
            n=1,
            temperature=0.6,
        )
        # Retrieve the generated response (updated for new OpenAI package)
        output_text: str | None = full_response.choices[0].message.content
        parsed_answer = output_text if output_text else ""
        return ChatEntry(entity=self, prompt=generated_prompt, answer=parsed_answer)

    def create_prompt(
        self, experiment_scenario: str, chat_list: List[ChatEntry], prompt_version: str
    ) -> List[ChatCompletionMessageParam]:
        """
        Creates a prompt with the past conversation in the format expected by OpenAI Chat API.
        Creates a prompt with the past conversation in the format expected by OpenAI Chat API.
        The returned conversation is a list of entries, which follows the format described at
        https://help.openai.com/en/articles/7042661-chatgpt-api-transition-guide.

        In particular, the "role" property has 3 values, which we use as follows:
            - "system": Only used in the first / last entries to set up the person instance identity.
            - "assistant": Used for messages generated by the person instance.
            - "user": Used for messages generated by other persons. Each entry can consist of
              messages from multiple persons, by concatenating the format "{name}: {content}\n".
        """

        assert prompt_version in [
            "v0",
            "v1",
            "v2",
        ], f"Unknown prompt version {prompt_version}. Please use v0, v1 or v2."
        prompt_version_literal: Literal["v0", "v1", "v2"] = cast(Literal["v0", "v1", "v2"], prompt_version)
        conversation: List[ChatCompletionMessageParam] = super().prompt_setups(
            experiment_scenario=experiment_scenario, prompt_version=prompt_version_literal
        )

        other_users_prompt = ""
        for chat_entry in chat_list:
            if isinstance(chat_entry.entity, System):  # System message
                if other_users_prompt:
                    conversation.append({"role": "user", "content": other_users_prompt})
                conversation.append({"role": "system", "content": chat_entry.answer})
                other_users_prompt = ""
            elif chat_entry.entity is self:  # My previous message
                if other_users_prompt:
                    conversation.append({"role": "user", "content": other_users_prompt})
                conversation.append({"role": "assistant", "content": chat_entry.answer})
                other_users_prompt = ""
            else:
                if other_users_prompt:
                    other_users_prompt += "\n"
                other_users_prompt += f"{chat_entry.entity.name}: {chat_entry.answer}"

        if other_users_prompt:
            conversation.append(
                {"role": "user", "content": other_users_prompt}
            )  # ChatCompletionUserMessageParam

        return conversation
