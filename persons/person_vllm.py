import logging
from typing import List, Dict
import openai
from openai import OpenAI
from persons.person import Person
from session_rooms.session_room import ChatEntry
from session_rooms.session_room import System


log = logging.getLogger(__name__)

class PersonVLLM(Person):
    PERSON_TYPE = "person_vllm"
    

    def __init__(self, background_story: str, name: str, prompt_version: str = "v0", *args, **kwargs):
        super().__init__(background_story, name)
        self.api_base = kwargs.get("vllm_api_base", "http://localhost:8000/v1")
        self.model = kwargs.get("model", "any-model")
        self.client = OpenAI(
            api_key="EMPTY",  # vLLM usually ignores this, but required by the client
            base_url=self.api_base,
        )

        self.prompt_version = prompt_version

    def generate_answer(self, experiment_scenario: str, chat_list: list[ChatEntry], prompt_version: str| None  = None):
        if prompt_version is None:
            prompt_version = self.prompt_version
        messages = self.create_prompt(experiment_scenario, chat_list, prompt_version)
        answer = self.evaluate(messages)
        return ChatEntry(entity=self, prompt=messages, answer=answer)

    def evaluate(self, messages, max_new_tokens=100):
        response = self.client.chat.completions.create(
            model=self.model,
            messages=messages,
            max_tokens=max_new_tokens,
            temperature=1.0,
            top_p=0.9,
            n=1,
            stop=["</s>", "\n"]
        )            

        output = (response.choices[0].message.content or "") if response.choices else ""
        return output.strip().removeprefix("Me: ")

      #TODO: Choose the best prompt and prompt structure (should it all be in system?)
    def create_prompt(self, experiment_scenario: str,
                      chat_list: List[ChatEntry], prompt_version: str) -> List[Dict[str, str], ]:
        """ 
        Creates a prompt with the past conversation in the format expected by OpenAI Chat API.
        The returned conversation is a list of entries, which follows the format described at
        https://help.openai.com/en/articles/7042661-chatgpt-api-transition-guide.

        In particular, the "role" property has 3 values, which we use as follows:
            - "system": Only used in the first / last entries to set up the person instance identity.
            - "assistant": Used for messages generated by the person instance.
            - "user": Used for messages generated by other persons. Each entry can consist of 
              messages from multiple persons, by concatenating the format "{name}: {content}\n".
        """
        if prompt_version ==  "v0":

            ###0###
            name_message = {"role": "system", "content": f"Your name is {self.name}."}
            scenario_message = {"role": "system", "content": f"The scenario is the following:"
                                                            f" {experiment_scenario}"}
            system_message = {"role": "system", "content": f"This is your background story:"
                                                        f" {self.background_story}"}
            general_instructions = {"role": "system", "content": "The following is a conversation between you and and another speaker. Complete "
                    "your next reply. Try to keep the reply shorter than 30 words.\n\n"}
            conversation = [general_instructions,name_message, scenario_message, system_message]

        elif prompt_version == "v1":

            ###1### (changes: order of system messages & newline missing in general instructions)
            name_message = {"role": "system", "content": f"Your name is {self.name}."}
            scenario_message = {"role": "system", "content": f"The scenario is the following:"
                                                             f" {experiment_scenario}"}
            system_message = {"role": "system", "content": f"This is your background story:"
                                                           f" {self.background_story}"}
            general_instructions = {"role": "system", "content": "The following is a conversation between you and and another speaker. Complete "
                    "your next reply. Try to keep the reply shorter than 30 words.\n"}
            conversation = [name_message, scenario_message, system_message, general_instructions]

        elif prompt_version == "v2":
            ###2### (changes: German translation)
            name_message = {"role": "system", "content": f"Your name is {self.name}."}
            scenario_message = {"role": "system", "content": f"Das Szenario ist das folgende:"
                                                            f" {experiment_scenario}"}
            system_message = {"role": "system", "content": f"Dies ist deine Vorgeschichte:"
                                                        f" {self.background_story}"}
            general_instructions = {"role": "system", "content": "Es folgt ein Gespräch zwischen Ihnen und einem anderen Sprecher. Vervollständigen Sie Ihre nächste Antwort. Versuchen Sie, die Antwort kürzer als 30 Wörter zu halten.\n\n"}
            conversation = [general_instructions,name_message, scenario_message, system_message]

        else:
            assert False, f"Unknown prompt version {prompt_version}. Please use v0, v1 or v2."


        other_users_prompt = ""
        for chat_entry in chat_list:
            if isinstance(chat_entry.entity, System): # System message

                if other_users_prompt:
                    conversation.append({"role": "user", "content": other_users_prompt})
                conversation.append({"role": "system", "content": chat_entry.answer})
                other_users_prompt = ""
            elif chat_entry.entity is self:  # My previous message
                if other_users_prompt:
                    conversation.append({"role": "user", "content": other_users_prompt})
                conversation.append({"role": "assistant", "content": chat_entry.answer})
                other_users_prompt = ""
            else: # Other user message
                if other_users_prompt:
                    other_users_prompt += "\n"
                other_users_prompt += f"{chat_entry.entity.name}: {chat_entry.answer}"

        if other_users_prompt:
            conversation.append({"role": "user", "content": other_users_prompt})

        return conversation
